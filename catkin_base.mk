# This Makefile contains targets/recipes for building and interacting with a 
# catking base docker image/context 
#
# The associated catkin_base image generated by this Makefile can be used for 
# creating catkin workspaces or used
# as a basis for other more complicated docker contexts requiring catkin.
#
# Run the help target/recipe to get a list of actions that can be performed.

ifeq ($(filter catkin_base.mk, $(notdir $(MAKEFILE_LIST))), catkin_base.mk)

MAKEFLAGS += --no-print-directory

.EXPORT_ALL_VARIABLES:
CATKIN_BASE_PROJECT:=catkin_base

CATKIN_BASE_MAKEFILE_PATH:=$(shell realpath "$(shell dirname "$(lastword $(MAKEFILE_LIST))")")
ifeq ($(SUBMODULES_PATH),)
    CATKIN_BASE_SUBMODULES_PATH:=${CATKIN_BASE_MAKEFILE_PATH}
else
    CATKIN_BASE_SUBMODULES_PATH:=$(shell realpath ${SUBMODULES_PATH})
endif

MAKE_GADGETS_PATH:=${CATKIN_BASE_SUBMODULES_PATH}/make_gadgets
ifeq ($(wildcard $(MAKE_GADGETS_PATH)/*),)
    $(info INFO: To clone submodules use: 'git submodules update --init --recursive')
    $(info INFO: To specify alternative path for submodules use: SUBMODULES_PATH="<path to submodules>" make build')
    $(info INFO: Default submodule path is: ${CATKIN_BASE_MAKEFILE_PATH}')
    $(error "ERROR: ${MAKE_GADGETS_PATH} does not exist. Did you clone the submodules?")
endif
REPO_DIRECTORY:=${CATKIN_BASE_MAKEFILE_PATH}

CATKIN_BASE_TAG:=$(shell cd "${MAKE_GADGETS_PATH}" && make get_sanitized_branch_name REPO_DIRECTORY="${REPO_DIRECTORY}")
CATKIN_BASE_IMAGE:=${CATKIN_BASE_PROJECT}:${CATKIN_BASE_TAG}

CATKIN_BASE_CMAKE_BUILD_PATH:="${CATKIN_BASE_PROJECT}/build"
CATKIN_BASE_CMAKE_INSTALL_PATH:="${CATKIN_BASE_CMAKE_BUILD_PATH}/install"

UID := $(shell id -u)
GID := $(shell id -g)


include ${CATKIN_BASE_SUBMODULES_PATH}/make_gadgets/make_gadgets.mk
include ${CATKIN_BASE_SUBMODULES_PATH}/apt_cacher_ng_docker/apt_cacher_ng_docker.mk

#Required for dockerfile-plus plugin e.g., any Dockerfile that has: INCLUDE+ 
DOCKER_BUILDKIT:=1
COMPOSE_DOCKER_CLI_BUILD:=1 

#SOURCE_DIRECTORY?=${CATKIN_BASE_MAKEFILE_PATH}
#ifeq (${SOURCE_DIRECTORY},)
#    $(error ERROR: The environmental variable "SOURCE_DIRECTORY" is not set, a SOURCE_DIRECTORY must be supplied. SOURCE_DIRECTORY is an absolute path to a directory containing catkin packages)
#endif

# CATKIN_WORKSPACE_DIRECTORY?=${CATKIN_BASE_MAKEFILE_PATH}/catkin_workspace
#ifeq (${CATKIN_WORKSPACE_DIRECTORY},)
#    $(error ERROR: The environmental variable "CATKIN_WORKSPACE_DIRECTORY" is not set, a CATKIN_WORKSPACE_DIRECTORY must be supplied. CATKIN_WORKSPACE_DIRECTORY is an absolute path where a catkin workspace should/will be created)
#endif


.PHONY: clean_catkin_workspace 
clean_catkin_workspace: # Delete the catkin workspace if it exists
	rm -rf ${CATKIN_WORKSPACE_DIRECTORY}

.PHONY: clean_catkin_base 
clean_catkin_base: ## Clean catkin_base docker context 
	docker rm $$(docker ps -a -q --filter "ancestor=${CATKIN_BASE_PROJECT}:${CATKIN_BASE_TAG}") --force 2> /dev/null || true
	docker rmi $$(docker images -q ${CATKIN_BASE_PROJECT}:${CATKIN_BASE_TAG}) --force 2> /dev/null || true
	docker rmi $$(docker images --filter "dangling=true" -q) --force > /dev/null 2>&1 || true

.PHONY: build_catkin 
build_catkin_base: clean_catkin_base ## Build a docker image with base catkin tools installed
	cd ${CATKIN_BASE_SUBMODULES_PATH}/apt_cacher_ng_docker && make up
	cd ${CATKIN_BASE_MAKEFILE_PATH} && \
    docker build \
                 --network host \
                 --build-arg UID=${UID} \
                 --build-arg GID=${GID} \
                 --file docker/Dockerfile.catkin_base \
                 --tag ${CATKIN_BASE_PROJECT}:${CATKIN_BASE_TAG} .

.PHONY: build_fast_catkin_base
build_fast_catkin_base: # Build the catkin_base docker context if it does not already exist in the docker repository. If it does exist this is a noop.
	@if [ -n "$$(docker images -q ${CATKIN_BASE_PROJECT}:${CATKIN_BASE_TAG})" ]; then \
        echo "Docker image: ${CATKIN_BASE_PROJECT}:${CATKIN_BASE_TAG} already build, skipping build."; \
    else \
        make build_catkin_base;\
    fi

.PHONY: create_catkin_workspace_docker
create_catkin_workspace_docker:
	make build_fast_catkin_base
	mkdir -p "${SOURCE_DIRECTORY}/.log"
	docker run --env SOURCE_DIRECTORY=${SOURCE_DIRECTORY} \
               --rm \
               --user "${UID}:${GID}" \
               --mount type=bind,source="${SOURCE_DIRECTORY}",target="${SOURCE_DIRECTORY}" \
               ${CATKIN_BASE_PROJECT}:${CATKIN_BASE_TAG} \
               'HOME="${SOURCE_DIRECTORY}" CATKIN_WORKSPACE_DIRECTORY="${CATKIN_WORKSPACE_DIRECTORY}" bash create_catkin_workspace.sh 2>&1' | tee -a "${SOURCE_DIRECTORY}/.log/create_catkin_workspace.log"

.PHONY: create_catkin_workspace
create_catkin_workspace: ## Creates a catkin workspace at: ${CATKIN_WORKSPACE_DIRECTORY}. Can be called within the adore_cli docker context or on the host
	make clean_catkin_workspace 
	@if [ -f "/.dockerenv" ]; then\
        bash ${CATKIN_BASE_MAKEFILE_PATH}/tools/create_catkin_workspace.sh;\
        exit 0;\
    else\
        make create_catkin_workspace_docker;\
        exit 0;\
    fi;

.PHONY: initialize_catkin_workspace
initialize_catkin_workspace: ## Creates a catkin workspace at: ${CATKIN_WORKSPACE_DIRECTORY}, only if there is not already one 
	@if [ -f "${CATKIN_WORKSPACE_DIRECTORY}/.bread_crumb" ]; then\
        printf "Catkin workspace already exists at: %s, skipping creation of catkin workspace.\n\n" "${CATKIN_WORKSPACE_DIRECTORY}";\
        exit 0;\
    else\
        make create_catkin_workspace;\
        touch ${CATKIN_WORKSPACE_DIRECTORY}/.bread_crumb;\
        exit 0;\
    fi;


.PHONY: image_catkin_base
image_catkin_base: ## Returns the current docker image name for catkin base 
	@printf "%s\n" ${CATKIN_BASE_IMAGE}

endif
